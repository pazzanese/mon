import sys
import os
import random
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = Path(__file__).parent
sys.path.append(str(ROOT_DIR))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from general_settings import ACCOUNT_TO_WORK
from src.modulse.runner import Runner
from utils.config import Config


class Process:
    def __init__(self):
        self.accounts = None
        self.get_accounts_data()

    def get_accounts_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            from utils.tools import get_accounts_data

            self.accounts = get_accounts_data()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
            # sys.exit(1)
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")

    def get_accounts_to_work(self) -> list:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å"""
        try:
            # –ï—Å–ª–∏ ACCOUNT_TO_WORK = 0, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if ACCOUNT_TO_WORK == 0:
                return list(range(len(self.accounts[0])))

            # –ï—Å–ª–∏ ACCOUNT_TO_WORK = [1, 3], –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            if isinstance(ACCOUNT_TO_WORK, list) and len(ACCOUNT_TO_WORK) == 2:
                start, end = ACCOUNT_TO_WORK
                return list(range(start - 1, end))

            # –ï—Å–ª–∏ ACCOUNT_TO_WORK = 1, 3, 5, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if isinstance(ACCOUNT_TO_WORK, (int, list)):
                if isinstance(ACCOUNT_TO_WORK, int):
                    return [ACCOUNT_TO_WORK - 1]
                return [acc - 1 for acc in ACCOUNT_TO_WORK]

            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ACCOUNT_TO_WORK")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            # sys.exit(1)
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    def start(self, exit_on_finish=True):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            accounts_to_work = self.get_accounts_to_work()
            config = Config()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

            for account_index in accounts_to_work:
                try:
                    account_name = self.accounts[0][account_index]
                    private_key = self.accounts[1][account_index]
                    proxy = self.accounts[2][account_index]

                    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}")

                    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Runner –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    runner = Runner(
                        account_name=account_name,
                        proxy=proxy,
                        private_key=private_key,
                        config=config,
                    )

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
                    runner.execute_tasks()

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {str(e)}")
                    continue

            print("\n‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
            if exit_on_finish:
                sys.exit(0)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∫–æ–¥–æ–º 0 (—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
            return

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
            # sys.exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∫–æ–¥–æ–º 1 (–æ—à–∏–±–∫–∞)
            if exit_on_finish:
                sys.exit(1)
            else:
                raise


def main():
    process = Process()
    process.start()


if __name__ == "__main__":
    main()
